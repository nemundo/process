<?php


namespace Nemundo\Process\App\Notification\Content;


use Nemundo\Core\Language\LanguageCode;
use Nemundo\Core\Language\Translation;
use Nemundo\Core\Type\Text\Html;
use Nemundo\Package\ResponsiveMail\ResponsiveActionMailMessage;
use Nemundo\Process\App\Notification\Data\Notification\Notification;
use Nemundo\Process\App\Notification\Data\Notification\NotificationDelete;
use Nemundo\Process\App\Notification\Data\Notification\NotificationReader;
use Nemundo\Process\App\Notification\Data\Notification\NotificationUpdate;
use Nemundo\Process\App\Notification\Parameter\NotificationParameter;
use Nemundo\Process\App\Notification\Row\NotificationCustomRow;
use Nemundo\Process\App\Notification\Site\NotificationItemSite;
use Nemundo\Process\App\Notification\Type\NotificationTrait;
use Nemundo\Process\Content\Data\Content\ContentReader;
use Nemundo\Process\Content\Type\AbstractTreeContentType;
use Nemundo\Process\Log\Type\LogTrait;
use Nemundo\Process\Template\Content\User\UserContentType;
use Nemundo\Process\Text\BoldText;
use Nemundo\Workflow\App\Notification\Config\NotificationConfig;
use Nemundo\Workflow\App\Notification\Config\NotificationSendMailConfig;

// braucht es das noch???
abstract class AbstractNotificationContentType extends AbstractTreeContentType
{

    use NotificationTrait;
    use LogTrait;





    protected function onDataRow()
    {

        $reader = new NotificationReader();
        $reader->model->loadContent();
        //$reader->model->loadSubjectContent();
        //$reader->model->subjectContent->loadContentType();
        $reader->model->content->loadUser();
        $reader->model->loadTo();
        $this->dataRow = $reader->getRowById($this->dataId);

    }


    /**
     * @return \Nemundo\Model\Row\AbstractModelDataRow|NotificationCustomRow
     */
    public function getDataRow()
    {
        return parent::getDataRow(); // TODO: Change the autogenerated stub
    }


    /*
    public function getDataRow()
    {
        $reader = new NotificationReader();
        $reader->model->loadContent();
        $reader->model->loadSubjectContent();
        $reader->model->subjectContent->loadContentType();
        $reader->model->content->loadUser();
        $reader->model->loadTo();
        $notificationRow = $reader->getRowById($this->dataId);
        return $notificationRow;
    }*/



    public function getSubject()
    {

        $subject[LanguageCode::EN] = 'Notification to '; // . (new BoldText())->getBold(($this->getDataRow())->to->displayName);
        $subject[LanguageCode::DE] = 'Benachrichtigung an ';  // . (new BoldText())->getBold(($this->getDataRow())->to->displayName);

        return  (new Translation())->getText($subject);

    }


    public function getLog()
    {

        return $this->getSubject();

    }


    public function getMessage()
    {
        return '';  //$this->message;
    }


}