<?php


namespace Nemundo\Process\App\Message\Content;


use Nemundo\Core\Debug\Debug;
use Nemundo\Process\App\Message\Data\Message\Message;
use Nemundo\Process\App\Message\Data\Message\MessageReader;
use Nemundo\Process\App\Message\Data\MessageTo\MessageTo;
use Nemundo\Process\App\Message\Notification\MessageNotification;
use Nemundo\Process\App\Message\Parameter\MessageParameter;
use Nemundo\Process\App\Message\Site\MessageSite;
use Nemundo\Process\App\Notification\Content\AbstractNotificationContentType;
use Nemundo\Process\Content\Type\AbstractTreeContentType;
use Nemundo\Process\Group\Data\Group\GroupReader;
use Nemundo\Process\Group\Type\AbstractGroupContentType;
use Nemundo\Process\Group\Type\GroupContentType;
use Nemundo\Process\Template\Data\LargeText\LargeText;

class MessageContentType extends AbstractTreeContentType  // AbstractNotificationContentType  //TreeContentType
{


    // multi to
    public $groupToId;

    public $subject;

    public $message;

    protected function loadContentType()
    {

        $this->typeLabel = 'Message';
        $this->typeId='24924474-86e7-469f-b1d7-cff776ceefe9';

        $this->formClass = MessageContentForm::class;
        $this->viewClass=MessageContentView::class;
        $this->viewSite=MessageSite::$site;
        $this->parameterClass=MessageParameter::class;

        // menu
        // comment, file, image, image gallery, add user

    }



    protected function onCreate()
    {


        $data = new Message();
        $data->subject = $this->subject;
        $data->message=$this->message;
        $this->dataId = $data->save();

        $data = new MessageTo();
        $data->messageId=$this->dataId;
        $data->toId=$this->groupToId;
        $data->save();

        //$this->ass

        //$groupReader = new GroupReader();
        //$groupReader->model->loadGroupType();
        //$groupRow =$groupReader->getRowById($this->groupToId);

        //(new Debug())->write($this->groupToId);


        $groupType = new GroupContentType($this->groupToId);


        /** @var AbstractGroupContentType $groupType */
        //$groupType = $groupRow->groupType->getContentType($this->groupToId);

        foreach ($groupType->getUserIdList() as $userId) {

            //(new Debug())->write($userId);

            $notification = new MessageNotification();
            $notification->userToId = $userId;
            $notification->subjectContentId = $this->getContentId();
            $notification->message = $this->message;
            $notification->saveType();
        }


    }


    public function getDataRow()
    {

        $messageRow = (new MessageReader())->getRowById($this->dataId);
        return $messageRow;
    }


    public function getSubject()
    {

        return $this->getDataRow()->subject;

    }


    public function getMessage()
    {
        return $this->getDataRow()->message;
        //return parent::getMessage(); // TODO: Change the autogenerated stub
    }


}