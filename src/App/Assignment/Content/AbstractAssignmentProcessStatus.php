<?php


namespace Nemundo\Process\App\Assignment\Content;


use Nemundo\Core\Language\LanguageCode;
use Nemundo\Core\Language\Translation;
use Nemundo\Process\App\Assignment\Data\AssignmentLog\AssignmentLog;
use Nemundo\Process\App\Assignment\Data\AssignmentLog\AssignmentLogDelete;
use Nemundo\Process\App\Assignment\Data\AssignmentLog\AssignmentLogReader;
use Nemundo\Process\App\Assignment\Data\AssignmentLog\AssignmentLogRow;
use Nemundo\Process\Workflow\Content\Status\AbstractProcessStatus;
use Nemundo\Workflow\App\Assignment\Data\Assignment\AssignmentRow;
use Nemundo\Workflow\App\Assignment\Row\AssignmentCustomRow;

abstract class AbstractAssignmentProcessStatus extends AbstractProcessStatus
{

    public $groupId;



    //use AssignmentTrait;



    protected function onDelete()
    {

        (new AssignmentLogDelete())->deleteById($this->dataId);

    }



    protected function onCreate()
    {

        parent::onCreate(); // TODO: Change the autogenerated stub

        $data = new AssignmentLog();
        $data->assignmentId = $this->groupId;
        $this->dataId = $data->save();

        $process = $this->getParentProcess();
        $process->changeAssignment($this->groupId);


    }


    /*
    protected function saveAssignment()
    {

        $data = new AssignmentLog();
        $data->assignmentId = $this->groupId;
        $this->dataId = $data->save();

        // $this->sendGroupNotification($this->groupId, new TaskCategory());

    }*/


    protected function onDataRow()
    {

        $reader = new AssignmentLogReader();
        $reader->model->loadAssignment();
        $this->dataRow = $reader->getRowById($this->dataId);

    }


    /**
     * @return \Nemundo\Model\Row\AbstractModelDataRow|AssignmentLogRow
     */
    public function getDataRow()
    {
        return parent::getDataRow(); // TODO: Change the autogenerated stub
    }


    /*
    public function getSubject()
    {

        $assignmentRow = $this->getDataRow();
        $subject[LanguageCode::EN] = 'Group Assignment to : ' . $assignmentRow->assignment->group;
        $subject[LanguageCode::DE] = 'Zuweisung an ' . $assignmentRow->assignment->group;

        return (new Translation())->getText($subject);

    }*/


    public function getMessage()
    {

        /*
        $message = 'Assignment';

        if ($this->message !== null) {
            $message = $this->message;
        }

        return $message;*/

        $assignmentRow = $this->getDataRow();
        $subject[LanguageCode::EN] = 'Group Assignment to : ' . $assignmentRow->assignment->group;
        $subject[LanguageCode::DE] = 'Zuweisung an ' . $assignmentRow->assignment->group;

        return (new Translation())->getText($subject);


    }


}