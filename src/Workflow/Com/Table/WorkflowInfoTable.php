<?php


namespace Nemundo\Process\Workflow\Com\Table;


use Nemundo\Admin\Com\Table\AdminLabelValueTable;
use Nemundo\Html\Formatting\Bold;
use Nemundo\Process\Group\Type\GroupContentType;
use Schleuniger\App\ChangeRequest\Row\EcrCustomRow;

class WorkflowInfoTable extends AdminLabelValueTable
{

    /**
     * @var EcrCustomRow
     */
    public $workflowRow;

    public function addDefault()
    {

        $this->addStatus();
        $this->addWorfklowClosed();
        $this->addAssignment();
        $this->addDeadline();
        $this->addCreator();
        $this->addSubject();

    }


    public function addSubject()
    {
        $this->addLabelValue($this->workflowRow->model->subject->label, $this->workflowRow->subject);
        return $this;
    }


    public function addStatus()
    {
        $this->addLabelValue($this->workflowRow->model->status->label, $this->workflowRow->status->contentType);
        return $this;
    }


    public function addWorfklowClosed()
    {
        $this->addLabelYesNoValue($this->workflowRow->model->workflowClosed->label, $this->workflowRow->workflowClosed);
        return $this;
    }


    public function addAssignment()
    {


        $group = new GroupContentType($this->workflowRow->assignmentId);


        $span = new Bold();  // new Span();
        $span->content = $this->workflowRow->assignment->group;
        $span->title = $group->getUserListText();

        $this->addLabelCom($this->workflowRow->model->assignment->label, $span);


        return $this;
    }


    public function addDeadline()
    {
        $this->addLabelValue($this->workflowRow->model->deadline->label, $this->workflowRow->getDeadline());
        return $this;
    }


    public function addCreator()
    {
        $this->addLabelValue('Ersteller', $this->workflowRow->getCreator());
        return $this;
    }


    public function getContent()
    {


        /*
         *
         *   //addAssignment()
        // addSubject()
         */


        /*
        $table = new AdminLabelValueTable($layout->col3);
        $table->addLabelValue($workflowRow->model->workflowNumber->label, $workflowRow->workflowNumber);
        $table->addLabelValue($workflowRow->model->subject->label, $workflowRow->subject);
        //$table->addLabelValue($model->assignment->label, $workflowRow->assignment->getValue());
        $table->addLabelValue($workflowRow->model->assignment->label, $workflowRow->assignment->group);

        $table->addLabelValue($workflowRow->model->assignment->groupType->label, $workflowRow->assignment->groupType->contentType);

        $ul = new UnorderedList();

        $group = new GroupContentType($workflowRow->assignmentId);
        foreach ($group->getUserList() as $userRow) {
            $ul->addText($userRow->login);
        }
        $table->addLabelCom('Member', $ul);

        $table->addLabelValue($workflowRow->model->status->label, $workflowRow->status->contentType);
        $table->addLabelYesNoValue($workflowRow->model->workflowClosed->label, $workflowRow->workflowClosed);


        if ($workflowRow->deadline !== null) {
            $table->addLabelValue($workflowRow->model->deadline->label, $workflowRow->deadline->getShortDateLeadingZeroFormat());
        }

        $table->addLabelValue($workflowRow->model->dateTime->label, $workflowRow->dateTime->getShortDateTimeLeadingZeroFormat());
        $table->addLabelValue($workflowRow->model->user->label, $workflowRow->user->displayName);
*/


        return parent::getContent(); // TODO: Change the autogenerated stub
    }

}