<?php


namespace Nemundo\Process\Workflow\Content\Item\Process;


use Nemundo\App\Content\Data\ContentLog\ContentLogCount;
use Nemundo\Core\Date\DateTimeDifference;
use Nemundo\Core\Debug\Debug;
use Nemundo\Core\Type\DateTime\Date;
use Nemundo\Core\Type\DateTime\DateTime;
use Nemundo\Db\Sql\Order\SortOrder;
use Nemundo\Process\Content\Data\Content\ContentReader;
use Nemundo\Process\Content\Item\AbstractContentItem;
use Nemundo\Process\Workflow\Content\Item\Status\DateTimeUserIdStatusItem;
use Nemundo\Process\Workflow\Content\Process\AbstractProcess;
use Nemundo\Process\Workflow\Content\Status\AbstractProcessStatus;
use Nemundo\Process\Workflow\Data\Process\ProcessId;
use Nemundo\Process\Workflow\Data\Status\StatusId;
use Nemundo\Process\Workflow\Data\Workflow\Workflow;
use Nemundo\Process\Workflow\Data\Workflow\WorkflowCount;
use Nemundo\Process\Workflow\Data\Workflow\WorkflowReader;
use Nemundo\Process\Workflow\Data\Workflow\WorkflowRow;
use Nemundo\Process\Workflow\Data\Workflow\WorkflowUpdate;
use Nemundo\Process\Workflow\Data\Workflow\WorkflowValue;
use Nemundo\Workflow\App\Identification\Model\Identification;

// WorkflowItem -->besser da AbstractProcess

// TaskProcess
// TaskProcessItem

abstract class AbstractWorkflowItem extends AbstractContentItem
{

    /**
     * @var AbstractProcess
     */
    public $contentType;

    /**
     * @var int
     */
    protected $number;

    /**
     * @var string
     */
    protected $workflowNumber;

    protected $subject = '[no subject]';

    /**
     * @var DateTime
     */
    // protected $dateTime;

    /**
     * @var string
     */
    // protected $userId;

    /**
     * @var Identification
     */
    protected $assignment;

    /**
     * @var WorkflowRow
     */
    private $workflowRow;

    public function __construct($id = null)
    {
        parent::__construct($id);

        $this->assignment = new Identification();
        //$this->dateTime = (new DateTime())->setNow();
        //$this->userId = (new UserSessionType())->userId;


        //$this->loadWorkflow();

    }


    protected function saveWorkflow()
    {

        $id = new ProcessId();
        $id->filter->andEqual($id->model->contentTypeId, $this->contentType->id);
        $processId = $id->getId();


        if ($this->number == null) {
            $value = new WorkflowValue();
            $value->field = $value->model->number;
            $value->filter->andEqual($value->model->processId, $processId);
            $this->number = $value->getMaxValue();
            if ($this->number == "") {
                $this->number = $this->contentType->startNumber;
            }
            $this->number = $this->number + 1;

            $this->workflowNumber = $this->contentType->prefixNumber . $this->number;
        }


        $id = new StatusId();
        $id->filter->andEqual($id->model->contentTypeId, $this->contentType->startStatus->id);
        $stausId = $id->getId();


        $data = new Workflow();
        $data->processId = $processId;
        $data->number = $this->number;
        $data->workflowNumber = $this->workflowNumber;
        $data->statusId = $stausId;
        $data->subject = $this->subject;
        $data->assignment = $this->assignment;
        $data->dateTime = $this->dateTime;
        $data->userId = $this->mitarbeiterId;
        $this->dataId = $data->save();

        $this->saveContent();

        $builder = new DateTimeUserIdStatusItem();
        $builder->parentId = $this->dataId;
        $builder->contentType = $this->contentType->startStatus;
        $builder->dateTime = $this->dateTime;
        $builder->mitarbeiterId = $this->mitarbeiterId;
        $builder->saveItem();


    }


    public function closeWorkflow()
    {

        // Assignment reset

        $update = new WorkflowUpdate();
        $update->workflowClosed = true;
        //$update->verantwortlicher->clearIdentification();
        $update->updateById($this->dataId);

    }



    public function existWorkflow() {

        $value=false;
        $count = new WorkflowCount();
        $count->filter->andEqual($count->model->id, $this->dataId);
        if ($count->getCount() == 1) {
            $value=true;
        }
        return $value;

    }


    public function deleteWorkflow()
    {

        // auf active=false setzen


        // inbox
        // alle verweise

    }


    public function deleteItem()
    {
        parent::deleteItem(); // TODO: Change the autogenerated stub
    }


    public function changeStatus(AbstractProcessStatus $status)
    {

        $update = new WorkflowUpdate();
        $update->statusId = $status->id;
        $update->updateById($this->dataId);

    }


    public function changeAssignment(Identification $assignment)
    {


        $update = new WorkflowUpdate();
        $update->assignment = $assignment;
        $update->updateById($this->dataId);

        // Assignment reset
    }



    public function clearAssignment()
    {


        $update = new WorkflowUpdate();
        $update->assignment->clearIdentification();  // = $assignment;
        $update->updateById($this->dataId);

        // Assignment reset
    }




    public function hasDeadline()
    {

        $value = false;
        $workflowRow = $this->getWorkflowRow();

        if ($workflowRow->deadline !== null) {
            $value = true;
        }

        return $value;
    }


    public function getDeadline()
    {

        $workflowRow = $this->getWorkflowRow();
        return $workflowRow->deadline;
    }


    public function isWorkflowClosed()
    {
        $workflowRow = $this->getWorkflowRow();
        $workflowClosed=false;
        if ($workflowRow !== null) {
           $workflowClosed =  $workflowRow->workflowClosed;
        }

        return $workflowClosed;

    }


    public function changeDeadline(Date $date)
    {

        $update = new WorkflowUpdate();
        $update->deadline = $date;
        $update->updateById($this->dataId);

    }


    public function getWorkflowRow()
    {

        //(new Debug())->write($this->dataId);

        // save in private variable
       // $workflowRow =null;
        if ($this->workflowRow == null) {
        //    if ($this->dataId !== null) {
         $reader = new WorkflowReader();  //)->getRowById($this->dataId);
            foreach ($reader->getData() as $workflowCustomRow) {
                $this->workflowRow=$workflowCustomRow;
            }

        }
        return $this->workflowRow;

    }


    // getWorkflowHistory
    /*public function getWorkflowLog()
     {


         $reader = new ContentReader();
         $reader->model->loadContentType();
         $reader->model->loadUserCreated();
         $reader->filter->andEqual($reader->model->parentId, $this->workflowId);
         $reader->addOrder($reader->model->itemOrder);

         return $reader->getData();

         /*
                 $reader = new WorkflowLogReader();
                 $reader->model->loadStatus();
                 $reader->model->loadUser();

                 $reader->filter->andEqual($reader->model->workflowId, $this->workflowId);
                 $reader->addOrder($reader->model->id);
                 return $reader->getData();*/


    //}


    public function getStart()
    {

        $dateTime = $this->getDateTime(SortOrder::ASCENDING);
        return $dateTime;

    }


    public function getEnd()
    {


        $dateTime = null;
        if ($this->getWorkflowRow()->workflowClosed) {

            $dateTime = $this->getDateTime(SortOrder::DESCENDING);

        } else {
            $dateTime = (new DateTime())->setNow();
        }

        return $dateTime;

    }


    private function getDateTime($sortOrder)
    {

        $reader = new ContentReader();
        $reader->filter->andEqual($reader->model->parentId, $this->dataId);
        $reader->addOrder($reader->model->id, $sortOrder);
        $dateTime = $reader->getRow()->dateTimeCreated;

        return $dateTime;

    }


    // getLeapTime
    public function getDurchlaufzeit()
    {

        $difference = new DateTimeDifference();
        $difference->dateFrom = $this->getStart();
        //$difference->dateFrom->resetTime();
        $difference->dateUntil = $this->getEnd();

        $day = $difference->getDifferenceInDay();

        return $day;


    }


    public function getLogCount()
    {

        $count = new ContentLogCount();
        $count->filter->andEqual($count->model->dataId, $this->dataId);

        return $count->getCount();

    }


}